import java.util.ArrayList;
import java.util.List;

class Node {
    int key;
    Node left, right, parent;

    public Node(int item) {
        key = item;
        left = right = parent = null;
    }
}

public class BinarySearchTree {
    private Node root;
    private int comparisons; // Removed static keyword


    public BinarySearchTree() {
        root = null;
        comparisons = 0;
    }


    public void insert(int key) {
        root = treeInsert(root, key);
    }


    private Node treeInsert(Node root, int key) {
        if (root == null) {
            comparisons++; // Increment counter for comparison with null node
            return new Node(key);
        }
        comparisons++; // Increment counter for comparison with non-null node
        if (key < root.key) {
            comparisons++; // Increment counter for comparison with key in left child
            root.left = treeInsert(root.left, key);
            root.left.parent = root;
        } else if (key > root.key) {
            comparisons += 2; // Increment counter for comparison with key and assignment
            root.right = treeInsert(root.right, key);
            root.right.parent = root;
        }
        return root;
    }

    public void inorderTreeWalk() {
        inorderTreeWalk(root);
    }

    private void inorderTreeWalk(Node root) {
        if (root != null) {
            inorderTreeWalk(root.left);
            // System.out.print(root.key + " ");
            inorderTreeWalk(root.right);
        }
    }

    public static void main(String[] args) {
        System.out.println("\nScenario 1: Distinct numbers in ascending order");
        int[] ascendingArray = generateAscendingArray(100);
        BSTSortAndPrint(ascendingArray, 100);
        ascendingArray = generateAscendingArray(1000);
        BSTSortAndPrint(ascendingArray, 1000);
        ascendingArray = generateAscendingArray(10000);
        BSTSortAndPrint(ascendingArray, 10000);

        System.out.println("\nScenario 2: Distinct numbers in descending order");
        int[] descendingArray = generateDescendingArray(100);
        BSTSortAndPrint(descendingArray, 100);
        descendingArray = generateDescendingArray(1000);
        BSTSortAndPrint(descendingArray, 1000);
        descendingArray = generateDescendingArray(10000);
        BSTSortAndPrint(descendingArray, 10000);

        System.out.println("\nScenario 3: Random numbers between 1 and 100,000");
        int[] randomArray = generateRandomArray(100);
        BSTSortAndPrint(randomArray, 100);
        randomArray = generateRandomArray(1000);
        BSTSortAndPrint(randomArray, 1000);
        randomArray = generateRandomArray(10000);
        BSTSortAndPrint(randomArray, 10000);

        System.out.println("\nScenario 4: Generated by calling fillArray method");
        int[] generatedArray = new int[100];
        fillArray(generatedArray, 0, generatedArray.length - 1);
        BSTSortAndPrint(generatedArray, 100);
        generatedArray = new int[1000];
        fillArray(generatedArray, 0, generatedArray.length - 1);
        BSTSortAndPrint(generatedArray, 1000);
        generatedArray = new int[10000];
        fillArray(generatedArray, 0, generatedArray.length - 1);
        BSTSortAndPrint(generatedArray, 10000);
    }


    private static int[] generateAscendingArray(int size) {
        int[] arr = new int[size];
        for (int i = 0; i < size; i++) {
            arr[i] = i + 1;
        }
        return arr;
    }


    private static int[] generateDescendingArray(int size) {
        int[] arr = new int[size];
        for (int i = 0; i < size; i++) {
            arr[i] = size - i;
        }
        return arr;
    }


    private static int[] generateRandomArray(int size) {
        int[] arr = new int[size];
        for (int i = 0; i < size; i++) {
            arr[i] = (int) (Math.random() * 100000) + 1;
        }
        return arr;
    }


    private static int index = 0; // Removed static keyword


    public static void fillArray(int[] arr, int low, int high) {
        index = 0; // Reset index for each call
        if (low <= high) {
            int mid = (low + high) / 2;
            arr[index++] = mid + 1;
            fillArray(arr, low, mid - 1);
            fillArray(arr, mid + 1, high);
        }
    }


    private static void BSTSortAndPrint(int[] arr, int size) {
        BinarySearchTree bst = new BinarySearchTree();
        bst.comparisons = 0;
        for (int num : arr) {
            bst.insert(num);
        }
        // Sorting the array using inorder tree walk
        List<Integer> sortedList = new ArrayList<>();
        bst.inorderTreeWalk(bst.root);
       
        System.out.println("\nSize n = " + size);
       
        // Print first 20 elements of the input array
        System.out.print("Input Array (First 20 elements): ");
        printArray(arr, 20);
       
        // Print first 20 elements of the sorted array
        System.out.print("Sorted Array (First 20 elements): ");
        printArray(sortedList.stream().mapToInt(Integer::intValue).toArray(), 20);
       
        // Total number of key comparisons made by the entire sorting algorithm
        System.out.println("Total Number of Key Comparisons: " + bst.comparisons);
    }


    private static void printArray(int[] arr, int count) {
        for (int i = 0; i < Math.min(count, arr.length); i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }
}

    